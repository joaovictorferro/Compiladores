   1  proc fib(int n) {
              [0001, 0001] (0046,              RW_PROC) {proc}
              [0001, 0006] (0000,                   ID) {fib}
              [0001, 0009] (0039,               ON_PAR) {(}
              [0001, 0010] (0027,               RW_INT) {int}
              [0001, 0014] (0000,                   ID) {n}
              [0001, 0015] (0040,              OFF_PAR) {)}
              [0001, 0017] (0041,             ON_BRACE) {{}
   2  		int n1 = 0, n2 = 1, n3;
              [0002, 0003] (0027,               RW_INT) {int}
              [0002, 0007] (0000,                   ID) {n1}
              [0002, 0010] (0005,               OP_ATR) {=}
              [0002, 0012] (0002,               CT_INT) {0}
              [0002, 0013] (0055,                  SEP) {,}
              [0002, 0015] (0000,                   ID) {n2}
              [0002, 0018] (0005,               OP_ATR) {=}
              [0002, 0020] (0002,               CT_INT) {1}
              [0002, 0021] (0055,                  SEP) {,}
              [0002, 0023] (0000,                   ID) {n3}
              [0002, 0025] (0048,            SEMICOLON) {;}
   3  		if (n == 0) {
              [0003, 0003] (0023,                RW_IF) {if}
              [0003, 0006] (0039,               ON_PAR) {(}
              [0003, 0007] (0000,                   ID) {n}
              [0003, 0009] (0006,               OP_REL) {==}
              [0003, 0012] (0002,               CT_INT) {0}
              [0003, 0013] (0040,              OFF_PAR) {)}
              [0003, 0015] (0041,             ON_BRACE) {{}
   4  			println("@d", n);
              [0004, 0004] (0035,           RW_PRINTLN) {println}
              [0004, 0011] (0039,               ON_PAR) {(}
              [0004, 0012] (0004,            CT_STRING) {"@d"}
              [0004, 0016] (0055,                  SEP) {,}
              [0004, 0018] (0000,                   ID) {n}
              [0004, 0019] (0040,              OFF_PAR) {)}
              [0004, 0020] (0048,            SEMICOLON) {;}
   5  		} 
              [0005, 0003] (0042,            OFF_BRACE) {}}
   6  if (n == 1) {
              [0006, 0001] (0023,                RW_IF) {if}
              [0006, 0004] (0039,               ON_PAR) {(}
              [0006, 0005] (0000,                   ID) {n}
              [0006, 0007] (0006,               OP_REL) {==}
              [0006, 0010] (0002,               CT_INT) {1}
              [0006, 0011] (0040,              OFF_PAR) {)}
              [0006, 0013] (0041,             ON_BRACE) {{}
   7  println("0, @d", n);
              [0007, 0001] (0035,           RW_PRINTLN) {println}
              [0007, 0008] (0039,               ON_PAR) {(}
              [0007, 0009] (0004,            CT_STRING) {"0, @d"}
              [0007, 0016] (0055,                  SEP) {,}
              [0007, 0018] (0000,                   ID) {n}
              [0007, 0019] (0040,              OFF_PAR) {)}
              [0007, 0020] (0048,            SEMICOLON) {;}
   8  		} else {
              [0008, 0003] (0042,            OFF_BRACE) {}}
              [0008, 0005] (0024,              RW_ELSE) {else}
              [0008, 0010] (0041,             ON_BRACE) {{}
   9  			string separator = ",";
              [0009, 0004] (0029,            RW_STRING) {string}
              [0009, 0011] (0000,                   ID) {separator}
              [0009, 0021] (0005,               OP_ATR) {=}
              [0009, 0023] (0004,            CT_STRING) {","}
              [0009, 0026] (0048,            SEMICOLON) {;}
  10  			print("0, 1, ");
              [0010, 0004] (0034,             RW_PRINT) {print}
              [0010, 0009] (0039,               ON_PAR) {(}
              [0010, 0010] (0004,            CT_STRING) {"0, 1, "}
              [0010, 0018] (0040,              OFF_PAR) {)}
              [0010, 0019] (0048,            SEMICOLON) {;}
  11  			while (true) {
              [0011, 0004] (0025,             RW_WHILE) {while}
              [0011, 0010] (0039,               ON_PAR) {(}
              [0011, 0011] (0000,                   ID) {true}
              [0011, 0015] (0040,              OFF_PAR) {)}
              [0011, 0017] (0041,             ON_BRACE) {{}
  12  				n3 = n1 + n2;
              [0012, 0005] (0000,                   ID) {n3}
              [0012, 0008] (0005,               OP_ATR) {=}
              [0012, 0010] (0000,                   ID) {n1}
              [0012, 0013] (0008,                OP_AD) {+}
              [0012, 0015] (0000,                   ID) {n2}
              [0012, 0017] (0048,            SEMICOLON) {;}
  13  				print("@s@d", separator, n3);
              [0013, 0005] (0034,             RW_PRINT) {print}
              [0013, 0010] (0039,               ON_PAR) {(}
              [0013, 0011] (0004,            CT_STRING) {"@s@d"}
              [0013, 0017] (0055,                  SEP) {,}
              [0013, 0019] (0000,                   ID) {separator}
              [0013, 0028] (0055,                  SEP) {,}
              [0013, 0030] (0000,                   ID) {n3}
              [0013, 0032] (0040,              OFF_PAR) {)}
              [0013, 0033] (0048,            SEMICOLON) {;}
  14  				if (n3 >= n) {
              [0014, 0005] (0023,                RW_IF) {if}
              [0014, 0008] (0039,               ON_PAR) {(}
              [0014, 0009] (0000,                   ID) {n3}
              [0014, 0012] (0015,           OP_GRTEREQ) {>=}
              [0014, 0015] (0000,                   ID) {n}
              [0014, 0016] (0040,              OFF_PAR) {)}
              [0014, 0018] (0041,             ON_BRACE) {{}
  15  					return;
              [0015, 0006] (0022,            RW_RETURN) {return}
              [0015, 0012] (0048,            SEMICOLON) {;}
  16  				}
              [0016, 0005] (0042,            OFF_BRACE) {}}
  17  				n1 = n2;
              [0017, 0005] (0000,                   ID) {n1}
              [0017, 0008] (0005,               OP_ATR) {=}
              [0017, 0010] (0000,                   ID) {n2}
              [0017, 0012] (0048,            SEMICOLON) {;}
  18  				n2 = n3;
              [0018, 0005] (0000,                   ID) {n2}
              [0018, 0008] (0005,               OP_ATR) {=}
              [0018, 0010] (0000,                   ID) {n3}
              [0018, 0012] (0048,            SEMICOLON) {;}
  19  			}
              [0019, 0004] (0042,            OFF_BRACE) {}}
  20  		}
              [0020, 0003] (0042,            OFF_BRACE) {}}
  21  }
              [0021, 0001] (0042,            OFF_BRACE) {}}
  22  fun int main() {
              [0022, 0001] (0021,               RW_FUN) {fun}
              [0022, 0005] (0027,               RW_INT) {int}
              [0022, 0009] (0047,              RW_MAIN) {main}
              [0022, 0013] (0039,               ON_PAR) {(}
              [0022, 0014] (0040,              OFF_PAR) {)}
              [0022, 0016] (0041,             ON_BRACE) {{}
  23  		int n;
              [0023, 0003] (0027,               RW_INT) {int}
              [0023, 0007] (0000,                   ID) {n}
              [0023, 0008] (0048,            SEMICOLON) {;}
  24  		read(n);
              [0024, 0003] (0033,              RW_READ) {read}
              [0024, 0007] (0039,               ON_PAR) {(}
              [0024, 0008] (0000,                   ID) {n}
              [0024, 0009] (0040,              OFF_PAR) {)}
              [0024, 0010] (0048,            SEMICOLON) {;}
  25  		fib(n);
              [0025, 0003] (0000,                   ID) {fib}
              [0025, 0006] (0039,               ON_PAR) {(}
              [0025, 0007] (0000,                   ID) {n}
              [0025, 0008] (0040,              OFF_PAR) {)}
              [0025, 0009] (0048,            SEMICOLON) {;}
  26  		return 0;
              [0026, 0003] (0022,            RW_RETURN) {return}
              [0026, 0010] (0002,               CT_INT) {0}
              [0026, 0011] (0048,            SEMICOLON) {;}
  27  }
              [0027, 0001] (0042,            OFF_BRACE) {}}