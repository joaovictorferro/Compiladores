   1  proc shellSort (int array){
              [0001, 0001] (0047,              RW_PROC) {proc}
              [0001, 0006] (0000,                   ID) {shellSort}
              [0001, 0016] (0040,               ON_PAR) {(}
              [0001, 0017] (0027,               RW_INT) {int}
              [0001, 0021] (0000,                   ID) {array}
              [0001, 0026] (0041,              OFF_PAR) {)}
              [0001, 0027] (0042,             ON_BRACE) {{}
   2  		int h = 1, c , j, n;
              [0002, 0003] (0027,               RW_INT) {int}
              [0002, 0007] (0000,                   ID) {h}
              [0002, 0009] (0005,               OP_ATR) {=}
              [0002, 0011] (0002,               CT_INT) {1}
              [0002, 0012] (0056,                  SEP) {,}
              [0002, 0014] (0000,                   ID) {c}
              [0002, 0016] (0056,                  SEP) {,}
              [0002, 0018] (0000,                   ID) {j}
              [0002, 0019] (0056,                  SEP) {,}
              [0002, 0021] (0000,                   ID) {n}
              [0002, 0022] (0049,            SEMICOLON) {;}
   3  		n = length(array);
              [0003, 0003] (0000,                   ID) {n}
              [0003, 0005] (0005,               OP_ATR) {=}
              [0003, 0007] (0039,            RW_LENGTH) {length}
              [0003, 0013] (0040,               ON_PAR) {(}
              [0003, 0014] (0000,                   ID) {array}
              [0003, 0019] (0041,              OFF_PAR) {)}
              [0003, 0020] (0049,            SEMICOLON) {;}
   4  		while(h < n){
              [0004, 0003] (0025,             RW_WHILE) {while}
              [0004, 0008] (0040,               ON_PAR) {(}
              [0004, 0009] (0000,                   ID) {h}
              [0004, 0011] (0014,              OP_LESS) {<}
              [0004, 0013] (0000,                   ID) {n}
              [0004, 0014] (0041,              OFF_PAR) {)}
              [0004, 0015] (0042,             ON_BRACE) {{}
   5  			h = h *3 +1;
              [0005, 0004] (0000,                   ID) {h}
              [0005, 0006] (0005,               OP_ATR) {=}
              [0005, 0008] (0000,                   ID) {h}
              [0005, 0010] (0010,              OP_MULT) {*}
              [0005, 0011] (0002,               CT_INT) {3}
              [0005, 0013] (0008,                OP_AD) {+}
              [0005, 0014] (0002,               CT_INT) {1}
              [0005, 0015] (0049,            SEMICOLON) {;}
   6  		}
              [0006, 0003] (0043,            OFF_BRACE) {}}
   7  		h = h/3;
              [0007, 0003] (0000,                   ID) {h}
              [0007, 0005] (0005,               OP_ATR) {=}
              [0007, 0007] (0000,                   ID) {h}
              [0007, 0008] (0011,               OP_DIV) {/}
              [0007, 0009] (0002,               CT_INT) {3}
              [0007, 0010] (0049,            SEMICOLON) {;}
   8  		while (h>0){
              [0008, 0003] (0025,             RW_WHILE) {while}
              [0008, 0009] (0040,               ON_PAR) {(}
              [0008, 0010] (0000,                   ID) {h}
              [0008, 0011] (0013,           OP_GREATER) {>}
              [0008, 0012] (0002,               CT_INT) {0}
              [0008, 0013] (0041,              OFF_PAR) {)}
              [0008, 0014] (0042,             ON_BRACE) {{}
   9  			for (int i : h , 1 , n){
              [0009, 0004] (0026,               RW_FOR) {for}
              [0009, 0008] (0040,               ON_PAR) {(}
              [0009, 0009] (0027,               RW_INT) {int}
              [0009, 0013] (0000,                   ID) {i}
              [0009, 0015] (0045,                COLON) {:}
              [0009, 0017] (0000,                   ID) {h}
              [0009, 0019] (0056,                  SEP) {,}
              [0009, 0021] (0002,               CT_INT) {1}
              [0009, 0023] (0056,                  SEP) {,}
              [0009, 0025] (0000,                   ID) {n}
              [0009, 0026] (0041,              OFF_PAR) {)}
              [0009, 0027] (0042,             ON_BRACE) {{}
  10  				c = array(i);
              [0010, 0005] (0000,                   ID) {c}
              [0010, 0007] (0005,               OP_ATR) {=}
              [0010, 0009] (0000,                   ID) {array}
              [0010, 0014] (0040,               ON_PAR) {(}
              [0010, 0015] (0000,                   ID) {i}
              [0010, 0016] (0041,              OFF_PAR) {)}
              [0010, 0017] (0049,            SEMICOLON) {;}
  11  				j = i;
              [0011, 0005] (0000,                   ID) {j}
              [0011, 0007] (0005,               OP_ATR) {=}
              [0011, 0009] (0000,                   ID) {i}
              [0011, 0010] (0049,            SEMICOLON) {;}
  12  				while ( j >= h && array (j - h) > c{
              [0012, 0005] (0025,             RW_WHILE) {while}
              [0012, 0011] (0040,               ON_PAR) {(}
              [0012, 0013] (0000,                   ID) {j}
              [0012, 0015] (0015,           OP_GRTEREQ) {>=}
              [0012, 0018] (0000,                   ID) {h}
              [0012, 0020] (0018,               OP_AND) {&}
              [0012, 0021] (0018,               OP_AND) {&}
              [0012, 0023] (0000,                   ID) {array}
              [0012, 0029] (0040,               ON_PAR) {(}
              [0012, 0030] (0000,                   ID) {j}
              [0012, 0032] (0009,               OP_SUB) {-}
              [0012, 0034] (0000,                   ID) {h}
              [0012, 0035] (0041,              OFF_PAR) {)}
              [0012, 0037] (0013,           OP_GREATER) {>}
              [0012, 0039] (0000,                   ID) {c}
              [0012, 0040] (0042,             ON_BRACE) {{}
  13  					array(j) = array (j -h);
              [0013, 0006] (0000,                   ID) {array}
              [0013, 0011] (0040,               ON_PAR) {(}
              [0013, 0012] (0000,                   ID) {j}
              [0013, 0013] (0041,              OFF_PAR) {)}
              [0013, 0015] (0005,               OP_ATR) {=}
              [0013, 0017] (0000,                   ID) {array}
              [0013, 0023] (0040,               ON_PAR) {(}
              [0013, 0024] (0000,                   ID) {j}
              [0013, 0026] (0009,               OP_SUB) {-}
              [0013, 0027] (0000,                   ID) {h}
              [0013, 0028] (0041,              OFF_PAR) {)}
              [0013, 0029] (0049,            SEMICOLON) {;}
  14  					j = j -h ;
              [0014, 0006] (0000,                   ID) {j}
              [0014, 0008] (0005,               OP_ATR) {=}
              [0014, 0010] (0000,                   ID) {j}
              [0014, 0012] (0009,               OP_SUB) {-}
              [0014, 0013] (0000,                   ID) {h}
              [0014, 0015] (0049,            SEMICOLON) {;}
  15  				}
              [0015, 0005] (0043,            OFF_BRACE) {}}
  16  					array(j) = c;
              [0016, 0006] (0000,                   ID) {array}
              [0016, 0011] (0040,               ON_PAR) {(}
              [0016, 0012] (0000,                   ID) {j}
              [0016, 0013] (0041,              OFF_PAR) {)}
              [0016, 0015] (0005,               OP_ATR) {=}
              [0016, 0017] (0000,                   ID) {c}
              [0016, 0018] (0049,            SEMICOLON) {;}
  17  			}
              [0017, 0004] (0043,            OFF_BRACE) {}}
  18  				h = h/2;
              [0018, 0005] (0000,                   ID) {h}
              [0018, 0007] (0005,               OP_ATR) {=}
              [0018, 0009] (0000,                   ID) {h}
              [0018, 0010] (0011,               OP_DIV) {/}
              [0018, 0011] (0002,               CT_INT) {2}
              [0018, 0012] (0049,            SEMICOLON) {;}
  19  		}
              [0019, 0003] (0043,            OFF_BRACE) {}}
  20  		return;
              [0020, 0003] (0022,            RW_RETURN) {return}
              [0020, 0009] (0049,            SEMICOLON) {;}
  21  	}
              [0021, 0002] (0043,            OFF_BRACE) {}}
  22  fun int main() {
              [0022, 0001] (0021,               RW_FUN) {fun}
              [0022, 0005] (0027,               RW_INT) {int}
              [0022, 0009] (0048,              RW_MAIN) {main}
              [0022, 0013] (0040,               ON_PAR) {(}
              [0022, 0014] (0041,              OFF_PAR) {)}
              [0022, 0016] (0042,             ON_BRACE) {{}
  23  		int n;
              [0023, 0003] (0027,               RW_INT) {int}
              [0023, 0007] (0000,                   ID) {n}
              [0023, 0008] (0049,            SEMICOLON) {;}
  24  		println("Tamanho do array");
              [0024, 0003] (0035,           RW_PRINTLN) {println}
              [0024, 0010] (0040,               ON_PAR) {(}
              [0024, 0011] (0004,            CT_STRING) {"Tamanho do array"}
              [0024, 0029] (0041,              OFF_PAR) {)}
              [0024, 0030] (0049,            SEMICOLON) {;}
  25  		read(n);
              [0025, 0003] (0033,              RW_READ) {read}
              [0025, 0007] (0040,               ON_PAR) {(}
              [0025, 0008] (0000,                   ID) {n}
              [0025, 0009] (0041,              OFF_PAR) {)}
              [0025, 0010] (0049,            SEMICOLON) {;}
  26  		int array(n);	
              [0026, 0003] (0027,               RW_INT) {int}
              [0026, 0007] (0000,                   ID) {array}
              [0026, 0012] (0040,               ON_PAR) {(}
              [0026, 0013] (0000,                   ID) {n}
              [0026, 0014] (0041,              OFF_PAR) {)}
              [0026, 0015] (0049,            SEMICOLON) {;}
  27  		println("Digite os numeros que serao ordenados");
              [0027, 0003] (0035,           RW_PRINTLN) {println}
              [0027, 0010] (0040,               ON_PAR) {(}
              [0027, 0011] (0004,            CT_STRING) {"Digite os numeros que serao ordenados"}
              [0027, 0050] (0041,              OFF_PAR) {)}
              [0027, 0051] (0049,            SEMICOLON) {;}
  28  		for( int i : 0,n,1) {
              [0028, 0003] (0026,               RW_FOR) {for}
              [0028, 0006] (0040,               ON_PAR) {(}
              [0028, 0008] (0027,               RW_INT) {int}
              [0028, 0012] (0000,                   ID) {i}
              [0028, 0014] (0045,                COLON) {:}
              [0028, 0016] (0002,               CT_INT) {0}
              [0028, 0017] (0056,                  SEP) {,}
              [0028, 0018] (0000,                   ID) {n}
              [0028, 0019] (0056,                  SEP) {,}
              [0028, 0020] (0002,               CT_INT) {1}
              [0028, 0021] (0041,              OFF_PAR) {)}
              [0028, 0023] (0042,             ON_BRACE) {{}
  29  			read(array(i));
              [0029, 0004] (0033,              RW_READ) {read}
              [0029, 0008] (0040,               ON_PAR) {(}
              [0029, 0009] (0000,                   ID) {array}
              [0029, 0014] (0040,               ON_PAR) {(}
              [0029, 0015] (0000,                   ID) {i}
              [0029, 0016] (0041,              OFF_PAR) {)}
              [0029, 0017] (0041,              OFF_PAR) {)}
              [0029, 0018] (0049,            SEMICOLON) {;}
  30  		}
              [0030, 0003] (0043,            OFF_BRACE) {}}
  31  		
  32  		println("lista dos valores digitados");
              [0032, 0003] (0035,           RW_PRINTLN) {println}
              [0032, 0010] (0040,               ON_PAR) {(}
              [0032, 0011] (0004,            CT_STRING) {"lista dos valores digitados"}
              [0032, 0040] (0041,              OFF_PAR) {)}
              [0032, 0041] (0049,            SEMICOLON) {;}
  33  		for (int i : 0, n, 1){
              [0033, 0003] (0026,               RW_FOR) {for}
              [0033, 0007] (0040,               ON_PAR) {(}
              [0033, 0008] (0027,               RW_INT) {int}
              [0033, 0012] (0000,                   ID) {i}
              [0033, 0014] (0045,                COLON) {:}
              [0033, 0016] (0002,               CT_INT) {0}
              [0033, 0017] (0056,                  SEP) {,}
              [0033, 0019] (0000,                   ID) {n}
              [0033, 0020] (0056,                  SEP) {,}
              [0033, 0022] (0002,               CT_INT) {1}
              [0033, 0023] (0041,              OFF_PAR) {)}
              [0033, 0024] (0042,             ON_BRACE) {{}
  34  			print(toString(array(i)) # " ");
              [0034, 0004] (0034,             RW_PRINT) {print}
              [0034, 0009] (0040,               ON_PAR) {(}
              [0034, 0010] (0030,          RW_TOSTRING) {toString}
              [0034, 0018] (0040,               ON_PAR) {(}
              [0034, 0019] (0000,                   ID) {array}
              [0034, 0024] (0040,               ON_PAR) {(}
              [0034, 0025] (0000,                   ID) {i}
              [0034, 0026] (0041,              OFF_PAR) {)}
              [0034, 0027] (0041,              OFF_PAR) {)}
              [0034, 0029] (0020,              OP_CONC) {#}
              [0034, 0031] (0004,            CT_STRING) {" "}
              [0034, 0034] (0041,              OFF_PAR) {)}
              [0034, 0035] (0049,            SEMICOLON) {;}
  35  		}
              [0035, 0003] (0043,            OFF_BRACE) {}}
  36  		shellSort(array);
              [0036, 0003] (0000,                   ID) {shellSort}
              [0036, 0012] (0040,               ON_PAR) {(}
              [0036, 0013] (0000,                   ID) {array}
              [0036, 0018] (0041,              OFF_PAR) {)}
              [0036, 0019] (0049,            SEMICOLON) {;}
  37  		println("valores ordenados");
              [0037, 0003] (0035,           RW_PRINTLN) {println}
              [0037, 0010] (0040,               ON_PAR) {(}
              [0037, 0011] (0004,            CT_STRING) {"valores ordenados"}
              [0037, 0030] (0041,              OFF_PAR) {)}
              [0037, 0031] (0049,            SEMICOLON) {;}
  38  		for(int i : 0,n,1) {
              [0038, 0003] (0026,               RW_FOR) {for}
              [0038, 0006] (0040,               ON_PAR) {(}
              [0038, 0007] (0027,               RW_INT) {int}
              [0038, 0011] (0000,                   ID) {i}
              [0038, 0013] (0045,                COLON) {:}
              [0038, 0015] (0002,               CT_INT) {0}
              [0038, 0016] (0056,                  SEP) {,}
              [0038, 0017] (0000,                   ID) {n}
              [0038, 0018] (0056,                  SEP) {,}
              [0038, 0019] (0002,               CT_INT) {1}
              [0038, 0020] (0041,              OFF_PAR) {)}
              [0038, 0022] (0042,             ON_BRACE) {{}
  39  			print(toString(array(i)) # " ");
              [0039, 0004] (0034,             RW_PRINT) {print}
              [0039, 0009] (0040,               ON_PAR) {(}
              [0039, 0010] (0030,          RW_TOSTRING) {toString}
              [0039, 0018] (0040,               ON_PAR) {(}
              [0039, 0019] (0000,                   ID) {array}
              [0039, 0024] (0040,               ON_PAR) {(}
              [0039, 0025] (0000,                   ID) {i}
              [0039, 0026] (0041,              OFF_PAR) {)}
              [0039, 0027] (0041,              OFF_PAR) {)}
              [0039, 0029] (0020,              OP_CONC) {#}
              [0039, 0031] (0004,            CT_STRING) {" "}
              [0039, 0034] (0041,              OFF_PAR) {)}
              [0039, 0035] (0049,            SEMICOLON) {;}
  40  		}
              [0040, 0003] (0043,            OFF_BRACE) {}}
  41  		return 0; 
              [0041, 0003] (0022,            RW_RETURN) {return}
              [0041, 0010] (0002,               CT_INT) {0}
              [0041, 0011] (0049,            SEMICOLON) {;}
  42  }
              [0042, 0001] (0043,            OFF_BRACE) {}}
