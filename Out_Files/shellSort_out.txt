   1  proc shellSort (int array [ ] , int n) {
              [0001, 0001] (0052,              RW_PROC) {proc}
              [0001, 0006] (0001,                   ID) {shellSort}
              [0001, 0016] (0045,               ON_PAR) {(}
              [0001, 0017] (0032,               RW_INT) {int}
              [0001, 0021] (0001,                   ID) {array}
              [0001, 0027] (0008,           ON_BRACKET) {[}
              [0001, 0029] (0009,          OFF_BRACKET) {]}
              [0001, 0031] (0061,                  SEP) {,}
              [0001, 0033] (0032,               RW_INT) {int}
              [0001, 0037] (0001,                   ID) {n}
              [0001, 0038] (0046,              OFF_PAR) {)}
              [0001, 0040] (0047,             ON_BRACE) {{}
   2  		int h = 1, c , j;
              [0002, 0003] (0032,               RW_INT) {int}
              [0002, 0007] (0001,                   ID) {h}
              [0002, 0009] (0010,               OP_ATR) {=}
              [0002, 0011] (0004,               CT_INT) {1}
              [0002, 0012] (0061,                  SEP) {,}
              [0002, 0014] (0001,                   ID) {c}
              [0002, 0016] (0061,                  SEP) {,}
              [0002, 0018] (0001,                   ID) {j}
              [0002, 0019] (0054,            SEMICOLON) {;}
   3  		while( h < n ) {
              [0003, 0003] (0030,             RW_WHILE) {while}
              [0003, 0008] (0045,               ON_PAR) {(}
              [0003, 0010] (0001,                   ID) {h}
              [0003, 0012] (0019,              OP_LESS) {<}
              [0003, 0014] (0001,                   ID) {n}
              [0003, 0016] (0046,              OFF_PAR) {)}
              [0003, 0018] (0047,             ON_BRACE) {{}
   4  			h = h * 3 + 1;
              [0004, 0004] (0001,                   ID) {h}
              [0004, 0006] (0010,               OP_ATR) {=}
              [0004, 0008] (0001,                   ID) {h}
              [0004, 0010] (0015,              OP_MULT) {*}
              [0004, 0012] (0004,               CT_INT) {3}
              [0004, 0014] (0013,                OP_AD) {+}
              [0004, 0016] (0004,               CT_INT) {1}
              [0004, 0017] (0054,            SEMICOLON) {;}
   5  		}
              [0005, 0003] (0048,            OFF_BRACE) {}}
   6  		h = h / 3;
              [0006, 0003] (0001,                   ID) {h}
              [0006, 0005] (0010,               OP_ATR) {=}
              [0006, 0007] (0001,                   ID) {h}
              [0006, 0009] (0016,               OP_DIV) {/}
              [0006, 0011] (0004,               CT_INT) {3}
              [0006, 0012] (0054,            SEMICOLON) {;}
   7  		while ( h > 0 ){
              [0007, 0003] (0030,             RW_WHILE) {while}
              [0007, 0009] (0045,               ON_PAR) {(}
              [0007, 0011] (0001,                   ID) {h}
              [0007, 0013] (0018,           OP_GREATER) {>}
              [0007, 0015] (0004,               CT_INT) {0}
              [0007, 0017] (0046,              OFF_PAR) {)}
              [0007, 0018] (0047,             ON_BRACE) {{}
   8  			for (int i : h , 1 , n){
              [0008, 0004] (0031,               RW_FOR) {for}
              [0008, 0008] (0045,               ON_PAR) {(}
              [0008, 0009] (0032,               RW_INT) {int}
              [0008, 0013] (0001,                   ID) {i}
              [0008, 0015] (0050,                COLON) {:}
              [0008, 0017] (0001,                   ID) {h}
              [0008, 0019] (0061,                  SEP) {,}
              [0008, 0021] (0004,               CT_INT) {1}
              [0008, 0023] (0061,                  SEP) {,}
              [0008, 0025] (0001,                   ID) {n}
              [0008, 0026] (0046,              OFF_PAR) {)}
              [0008, 0027] (0047,             ON_BRACE) {{}
   9  				c = array(i);
              [0009, 0005] (0001,                   ID) {c}
              [0009, 0007] (0010,               OP_ATR) {=}
              [0009, 0009] (0001,                   ID) {array}
              [0009, 0014] (0045,               ON_PAR) {(}
              [0009, 0015] (0001,                   ID) {i}
              [0009, 0016] (0046,              OFF_PAR) {)}
              [0009, 0017] (0054,            SEMICOLON) {;}
  10  				j = i;
              [0010, 0005] (0001,                   ID) {j}
              [0010, 0007] (0010,               OP_ATR) {=}
              [0010, 0009] (0001,                   ID) {i}
              [0010, 0010] (0054,            SEMICOLON) {;}
  11  				while ( j >= h & array [ j - h ] > c ) {
              [0011, 0005] (0030,             RW_WHILE) {while}
              [0011, 0011] (0045,               ON_PAR) {(}
              [0011, 0013] (0001,                   ID) {j}
              [0011, 0015] (0020,           OP_GRTEREQ) {>=}
              [0011, 0018] (0001,                   ID) {h}
              [0011, 0020] (0023,               OP_AND) {&}
              [0011, 0022] (0001,                   ID) {array}
              [0011, 0028] (0008,           ON_BRACKET) {[}
              [0011, 0030] (0001,                   ID) {j}
              [0011, 0032] (0014,               OP_SUB) {-}
              [0011, 0034] (0001,                   ID) {h}
              [0011, 0036] (0009,          OFF_BRACKET) {]}
              [0011, 0038] (0018,           OP_GREATER) {>}
              [0011, 0040] (0001,                   ID) {c}
              [0011, 0042] (0046,              OFF_PAR) {)}
              [0011, 0044] (0047,             ON_BRACE) {{}
  12  					array [ j ] = array [ j - h ]; 
              [0012, 0006] (0001,                   ID) {array}
              [0012, 0012] (0008,           ON_BRACKET) {[}
              [0012, 0014] (0001,                   ID) {j}
              [0012, 0016] (0009,          OFF_BRACKET) {]}
              [0012, 0018] (0010,               OP_ATR) {=}
              [0012, 0020] (0001,                   ID) {array}
              [0012, 0026] (0008,           ON_BRACKET) {[}
              [0012, 0028] (0001,                   ID) {j}
              [0012, 0030] (0014,               OP_SUB) {-}
              [0012, 0032] (0001,                   ID) {h}
              [0012, 0034] (0009,          OFF_BRACKET) {]}
              [0012, 0035] (0054,            SEMICOLON) {;}
  13  					j = j - h ;
              [0013, 0006] (0001,                   ID) {j}
              [0013, 0008] (0010,               OP_ATR) {=}
              [0013, 0010] (0001,                   ID) {j}
              [0013, 0012] (0014,               OP_SUB) {-}
              [0013, 0014] (0001,                   ID) {h}
              [0013, 0016] (0054,            SEMICOLON) {;}
  14  				}
              [0014, 0005] (0048,            OFF_BRACE) {}}
  15  					array [ j ]  = c;
              [0015, 0006] (0001,                   ID) {array}
              [0015, 0012] (0008,           ON_BRACKET) {[}
              [0015, 0014] (0001,                   ID) {j}
              [0015, 0016] (0009,          OFF_BRACKET) {]}
              [0015, 0019] (0010,               OP_ATR) {=}
              [0015, 0021] (0001,                   ID) {c}
              [0015, 0022] (0054,            SEMICOLON) {;}
  16  			}
              [0016, 0004] (0048,            OFF_BRACE) {}}
  17  				h = h / 2;
              [0017, 0005] (0001,                   ID) {h}
              [0017, 0007] (0010,               OP_ATR) {=}
              [0017, 0009] (0001,                   ID) {h}
              [0017, 0011] (0016,               OP_DIV) {/}
              [0017, 0013] (0004,               CT_INT) {2}
              [0017, 0014] (0054,            SEMICOLON) {;}
  18  		}
              [0018, 0003] (0048,            OFF_BRACE) {}}
  19  	}
              [0019, 0002] (0048,            OFF_BRACE) {}}
  20  	
  21  	fun int main() {
              [0021, 0002] (0026,               RW_FUN) {fun}
              [0021, 0006] (0032,               RW_INT) {int}
              [0021, 0010] (0053,              RW_MAIN) {main}
              [0021, 0014] (0045,               ON_PAR) {(}
              [0021, 0015] (0046,              OFF_PAR) {)}
              [0021, 0017] (0047,             ON_BRACE) {{}
  22  		int n;
              [0022, 0003] (0032,               RW_INT) {int}
              [0022, 0007] (0001,                   ID) {n}
              [0022, 0008] (0054,            SEMICOLON) {;}
  23  		println("Tamanho do array");
              [0023, 0003] (0040,           RW_PRINTLN) {println}
              [0023, 0010] (0045,               ON_PAR) {(}
              [0023, 0011] (0006,            CT_STRING) {"Tamanho do array"}
              [0023, 0029] (0046,              OFF_PAR) {)}
              [0023, 0030] (0054,            SEMICOLON) {;}
  24  		read(n);
              [0024, 0003] (0038,              RW_READ) {read}
              [0024, 0007] (0045,               ON_PAR) {(}
              [0024, 0008] (0001,                   ID) {n}
              [0024, 0009] (0046,              OFF_PAR) {)}
              [0024, 0010] (0054,            SEMICOLON) {;}
  25  		int array [ n ];	
              [0025, 0003] (0032,               RW_INT) {int}
              [0025, 0007] (0001,                   ID) {array}
              [0025, 0013] (0008,           ON_BRACKET) {[}
              [0025, 0015] (0001,                   ID) {n}
              [0025, 0017] (0009,          OFF_BRACKET) {]}
              [0025, 0018] (0054,            SEMICOLON) {;}
  26  		println("Digite os numeros que serao ordenados");
              [0026, 0003] (0040,           RW_PRINTLN) {println}
              [0026, 0010] (0045,               ON_PAR) {(}
              [0026, 0011] (0006,            CT_STRING) {"Digite os numeros que serao ordenados"}
              [0026, 0050] (0046,              OFF_PAR) {)}
              [0026, 0051] (0054,            SEMICOLON) {;}
  27  		for( int i : 0,1,n) {
              [0027, 0003] (0031,               RW_FOR) {for}
              [0027, 0006] (0045,               ON_PAR) {(}
              [0027, 0008] (0032,               RW_INT) {int}
              [0027, 0012] (0001,                   ID) {i}
              [0027, 0014] (0050,                COLON) {:}
              [0027, 0016] (0004,               CT_INT) {0}
              [0027, 0017] (0061,                  SEP) {,}
              [0027, 0018] (0004,               CT_INT) {1}
              [0027, 0019] (0061,                  SEP) {,}
              [0027, 0020] (0001,                   ID) {n}
              [0027, 0021] (0046,              OFF_PAR) {)}
              [0027, 0023] (0047,             ON_BRACE) {{}
  28  			read( array [ i ] );
              [0028, 0004] (0038,              RW_READ) {read}
              [0028, 0008] (0045,               ON_PAR) {(}
              [0028, 0010] (0001,                   ID) {array}
              [0028, 0016] (0008,           ON_BRACKET) {[}
              [0028, 0018] (0001,                   ID) {i}
              [0028, 0020] (0009,          OFF_BRACKET) {]}
              [0028, 0022] (0046,              OFF_PAR) {)}
              [0028, 0023] (0054,            SEMICOLON) {;}
  29  		}
              [0029, 0003] (0048,            OFF_BRACE) {}}
  30  		
  31  		println("lista dos valores digitados");
              [0031, 0003] (0040,           RW_PRINTLN) {println}
              [0031, 0010] (0045,               ON_PAR) {(}
              [0031, 0011] (0006,            CT_STRING) {"lista dos valores digitados"}
              [0031, 0040] (0046,              OFF_PAR) {)}
              [0031, 0041] (0054,            SEMICOLON) {;}
  32  		for (int i : 0, 1, n){
              [0032, 0003] (0031,               RW_FOR) {for}
              [0032, 0007] (0045,               ON_PAR) {(}
              [0032, 0008] (0032,               RW_INT) {int}
              [0032, 0012] (0001,                   ID) {i}
              [0032, 0014] (0050,                COLON) {:}
              [0032, 0016] (0004,               CT_INT) {0}
              [0032, 0017] (0061,                  SEP) {,}
              [0032, 0019] (0004,               CT_INT) {1}
              [0032, 0020] (0061,                  SEP) {,}
              [0032, 0022] (0001,                   ID) {n}
              [0032, 0023] (0046,              OFF_PAR) {)}
              [0032, 0024] (0047,             ON_BRACE) {{}
  33  			int a = array [ i ];
              [0033, 0004] (0032,               RW_INT) {int}
              [0033, 0008] (0001,                   ID) {a}
              [0033, 0010] (0010,               OP_ATR) {=}
              [0033, 0012] (0001,                   ID) {array}
              [0033, 0018] (0008,           ON_BRACKET) {[}
              [0033, 0020] (0001,                   ID) {i}
              [0033, 0022] (0009,          OFF_BRACKET) {]}
              [0033, 0023] (0054,            SEMICOLON) {;}
  34  			println (a);
              [0034, 0004] (0040,           RW_PRINTLN) {println}
              [0034, 0012] (0045,               ON_PAR) {(}
              [0034, 0013] (0001,                   ID) {a}
              [0034, 0014] (0046,              OFF_PAR) {)}
              [0034, 0015] (0054,            SEMICOLON) {;}
  35  		}
              [0035, 0003] (0048,            OFF_BRACE) {}}
  36  		
  37  		shellSort (array,n);
              [0037, 0003] (0001,                   ID) {shellSort}
              [0037, 0013] (0045,               ON_PAR) {(}
              [0037, 0014] (0001,                   ID) {array}
              [0037, 0019] (0061,                  SEP) {,}
              [0037, 0020] (0001,                   ID) {n}
              [0037, 0021] (0046,              OFF_PAR) {)}
              [0037, 0022] (0054,            SEMICOLON) {;}
  38  		
  39  		println("valores ordenados");
              [0039, 0003] (0040,           RW_PRINTLN) {println}
              [0039, 0010] (0045,               ON_PAR) {(}
              [0039, 0011] (0006,            CT_STRING) {"valores ordenados"}
              [0039, 0030] (0046,              OFF_PAR) {)}
              [0039, 0031] (0054,            SEMICOLON) {;}
  40  		for(int i : 0 , 1 , n) {
              [0040, 0003] (0031,               RW_FOR) {for}
              [0040, 0006] (0045,               ON_PAR) {(}
              [0040, 0007] (0032,               RW_INT) {int}
              [0040, 0011] (0001,                   ID) {i}
              [0040, 0013] (0050,                COLON) {:}
              [0040, 0015] (0004,               CT_INT) {0}
              [0040, 0017] (0061,                  SEP) {,}
              [0040, 0019] (0004,               CT_INT) {1}
              [0040, 0021] (0061,                  SEP) {,}
              [0040, 0023] (0001,                   ID) {n}
              [0040, 0024] (0046,              OFF_PAR) {)}
              [0040, 0026] (0047,             ON_BRACE) {{}
  41  			int b = array [ i ];
              [0041, 0004] (0032,               RW_INT) {int}
              [0041, 0008] (0001,                   ID) {b}
              [0041, 0010] (0010,               OP_ATR) {=}
              [0041, 0012] (0001,                   ID) {array}
              [0041, 0018] (0008,           ON_BRACKET) {[}
              [0041, 0020] (0001,                   ID) {i}
              [0041, 0022] (0009,          OFF_BRACKET) {]}
              [0041, 0023] (0054,            SEMICOLON) {;}
  42  			println(b);
              [0042, 0004] (0040,           RW_PRINTLN) {println}
              [0042, 0011] (0045,               ON_PAR) {(}
              [0042, 0012] (0001,                   ID) {b}
              [0042, 0013] (0046,              OFF_PAR) {)}
              [0042, 0014] (0054,            SEMICOLON) {;}
  43  		}
              [0043, 0003] (0048,            OFF_BRACE) {}}
  44  		return 0; 
              [0044, 0003] (0027,            RW_RETURN) {return}
              [0044, 0010] (0004,               CT_INT) {0}
              [0044, 0011] (0054,            SEMICOLON) {;}
  45  	}
              [0045, 0002] (0048,            OFF_BRACE) {}}
