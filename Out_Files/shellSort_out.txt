   1  proc shellSort (int array [ ] , int n) {
              [0001, 0001] (0052,              RW_PROC) {proc}
              [0001, 0006] (0001,                   ID) {shellSort}
              [0001, 0016] (0045,               ON_PAR) {(}
              [0001, 0017] (0032,               RW_INT) {int}
              [0001, 0021] (0001,                   ID) {array}
              [0001, 0027] (0008,           ON_BRACKET) {[}
              [0001, 0029] (0009,          OFF_BRACKET) {]}
              [0001, 0031] (0061,                  SEP) {,}
              [0001, 0033] (0032,               RW_INT) {int}
              [0001, 0037] (0001,                   ID) {n}
              [0001, 0038] (0046,              OFF_PAR) {)}
              [0001, 0040] (0047,             ON_BRACE) {{}
   2  		int h = 1, c , j;
              [0002, 0003] (0032,               RW_INT) {int}
              [0002, 0007] (0001,                   ID) {h}
              [0002, 0009] (0010,               OP_ATR) {=}
              [0002, 0011] (0004,               CT_INT) {1}
              [0002, 0012] (0061,                  SEP) {,}
              [0002, 0014] (0001,                   ID) {c}
              [0002, 0016] (0061,                  SEP) {,}
              [0002, 0018] (0001,                   ID) {j}
              [0002, 0019] (0054,            SEMICOLON) {;}
   3  		
   4  		while( h < n ) {
              [0004, 0003] (0030,             RW_WHILE) {while}
              [0004, 0008] (0045,               ON_PAR) {(}
              [0004, 0010] (0001,                   ID) {h}
              [0004, 0012] (0019,              OP_LESS) {<}
              [0004, 0014] (0001,                   ID) {n}
              [0004, 0016] (0046,              OFF_PAR) {)}
              [0004, 0018] (0047,             ON_BRACE) {{}
   5  			h = h * 3 + 1;
              [0005, 0004] (0001,                   ID) {h}
              [0005, 0006] (0010,               OP_ATR) {=}
              [0005, 0008] (0001,                   ID) {h}
              [0005, 0010] (0015,              OP_MULT) {*}
              [0005, 0012] (0004,               CT_INT) {3}
              [0005, 0014] (0013,                OP_AD) {+}
              [0005, 0016] (0004,               CT_INT) {1}
              [0005, 0017] (0054,            SEMICOLON) {;}
   6  		}
              [0006, 0003] (0048,            OFF_BRACE) {}}
   7  		h = h / 3;
              [0007, 0003] (0001,                   ID) {h}
              [0007, 0005] (0010,               OP_ATR) {=}
              [0007, 0007] (0001,                   ID) {h}
              [0007, 0009] (0016,               OP_DIV) {/}
              [0007, 0011] (0004,               CT_INT) {3}
              [0007, 0012] (0054,            SEMICOLON) {;}
   8  		while ( h > 0 ){
              [0008, 0003] (0030,             RW_WHILE) {while}
              [0008, 0009] (0045,               ON_PAR) {(}
              [0008, 0011] (0001,                   ID) {h}
              [0008, 0013] (0018,           OP_GREATER) {>}
              [0008, 0015] (0004,               CT_INT) {0}
              [0008, 0017] (0046,              OFF_PAR) {)}
              [0008, 0018] (0047,             ON_BRACE) {{}
   9  			for (int i : h , 1 , n){
              [0009, 0004] (0031,               RW_FOR) {for}
              [0009, 0008] (0045,               ON_PAR) {(}
              [0009, 0009] (0032,               RW_INT) {int}
              [0009, 0013] (0001,                   ID) {i}
              [0009, 0015] (0050,                COLON) {:}
              [0009, 0017] (0001,                   ID) {h}
              [0009, 0019] (0061,                  SEP) {,}
              [0009, 0021] (0004,               CT_INT) {1}
              [0009, 0023] (0061,                  SEP) {,}
              [0009, 0025] (0001,                   ID) {n}
              [0009, 0026] (0046,              OFF_PAR) {)}
              [0009, 0027] (0047,             ON_BRACE) {{}
  10  				c = array(i);
              [0010, 0005] (0001,                   ID) {c}
              [0010, 0007] (0010,               OP_ATR) {=}
              [0010, 0009] (0001,                   ID) {array}
              [0010, 0014] (0045,               ON_PAR) {(}
              [0010, 0015] (0001,                   ID) {i}
              [0010, 0016] (0046,              OFF_PAR) {)}
              [0010, 0017] (0054,            SEMICOLON) {;}
  11  				j = i;
              [0011, 0005] (0001,                   ID) {j}
              [0011, 0007] (0010,               OP_ATR) {=}
              [0011, 0009] (0001,                   ID) {i}
              [0011, 0010] (0054,            SEMICOLON) {;}
  12  				while ( j >= h & array [ j - h ] > c ) {
              [0012, 0005] (0030,             RW_WHILE) {while}
              [0012, 0011] (0045,               ON_PAR) {(}
              [0012, 0013] (0001,                   ID) {j}
              [0012, 0015] (0020,           OP_GRTEREQ) {>=}
              [0012, 0018] (0001,                   ID) {h}
              [0012, 0020] (0023,               OP_AND) {&}
              [0012, 0022] (0001,                   ID) {array}
              [0012, 0028] (0008,           ON_BRACKET) {[}
              [0012, 0030] (0001,                   ID) {j}
              [0012, 0032] (0014,               OP_SUB) {-}
              [0012, 0034] (0001,                   ID) {h}
              [0012, 0036] (0009,          OFF_BRACKET) {]}
              [0012, 0038] (0018,           OP_GREATER) {>}
              [0012, 0040] (0001,                   ID) {c}
              [0012, 0042] (0046,              OFF_PAR) {)}
              [0012, 0044] (0047,             ON_BRACE) {{}
  13  					array [ j ] = array [ j - h ]; 
              [0013, 0006] (0001,                   ID) {array}
              [0013, 0012] (0008,           ON_BRACKET) {[}
              [0013, 0014] (0001,                   ID) {j}
              [0013, 0016] (0009,          OFF_BRACKET) {]}
              [0013, 0018] (0010,               OP_ATR) {=}
              [0013, 0020] (0001,                   ID) {array}
              [0013, 0026] (0008,           ON_BRACKET) {[}
              [0013, 0028] (0001,                   ID) {j}
              [0013, 0030] (0014,               OP_SUB) {-}
              [0013, 0032] (0001,                   ID) {h}
              [0013, 0034] (0009,          OFF_BRACKET) {]}
              [0013, 0035] (0054,            SEMICOLON) {;}
  14  					j = j - h ;
              [0014, 0006] (0001,                   ID) {j}
              [0014, 0008] (0010,               OP_ATR) {=}
              [0014, 0010] (0001,                   ID) {j}
              [0014, 0012] (0014,               OP_SUB) {-}
              [0014, 0014] (0001,                   ID) {h}
              [0014, 0016] (0054,            SEMICOLON) {;}
  15  				}
              [0015, 0005] (0048,            OFF_BRACE) {}}
  16  					array [ j ]  = c;
              [0016, 0006] (0001,                   ID) {array}
              [0016, 0012] (0008,           ON_BRACKET) {[}
              [0016, 0014] (0001,                   ID) {j}
              [0016, 0016] (0009,          OFF_BRACKET) {]}
              [0016, 0019] (0010,               OP_ATR) {=}
              [0016, 0021] (0001,                   ID) {c}
              [0016, 0022] (0054,            SEMICOLON) {;}
  17  			}
              [0017, 0004] (0048,            OFF_BRACE) {}}
  18  				h = h / 2;
              [0018, 0005] (0001,                   ID) {h}
              [0018, 0007] (0010,               OP_ATR) {=}
              [0018, 0009] (0001,                   ID) {h}
              [0018, 0011] (0016,               OP_DIV) {/}
              [0018, 0013] (0004,               CT_INT) {2}
              [0018, 0014] (0054,            SEMICOLON) {;}
  19  		}
              [0019, 0003] (0048,            OFF_BRACE) {}}
  20  	}
              [0020, 0002] (0048,            OFF_BRACE) {}}
  21  	
  22  	fun int main() {
              [0022, 0002] (0026,               RW_FUN) {fun}
              [0022, 0006] (0032,               RW_INT) {int}
              [0022, 0010] (0053,              RW_MAIN) {main}
              [0022, 0014] (0045,               ON_PAR) {(}
              [0022, 0015] (0046,              OFF_PAR) {)}
              [0022, 0017] (0047,             ON_BRACE) {{}
  23  		int n;
              [0023, 0003] (0032,               RW_INT) {int}
              [0023, 0007] (0001,                   ID) {n}
              [0023, 0008] (0054,            SEMICOLON) {;}
  24  		println("Tamanho do array");
              [0024, 0003] (0040,           RW_PRINTLN) {println}
              [0024, 0010] (0045,               ON_PAR) {(}
              [0024, 0011] (0006,            CT_STRING) {"Tamanho do array"}
              [0024, 0029] (0046,              OFF_PAR) {)}
              [0024, 0030] (0054,            SEMICOLON) {;}
  25  		read(n);
              [0025, 0003] (0038,              RW_READ) {read}
              [0025, 0007] (0045,               ON_PAR) {(}
              [0025, 0008] (0001,                   ID) {n}
              [0025, 0009] (0046,              OFF_PAR) {)}
              [0025, 0010] (0054,            SEMICOLON) {;}
  26  		int array [ n ];	
              [0026, 0003] (0032,               RW_INT) {int}
              [0026, 0007] (0001,                   ID) {array}
              [0026, 0013] (0008,           ON_BRACKET) {[}
              [0026, 0015] (0001,                   ID) {n}
              [0026, 0017] (0009,          OFF_BRACKET) {]}
              [0026, 0018] (0054,            SEMICOLON) {;}
  27  		println("Digite os numeros que serao ordenados");
              [0027, 0003] (0040,           RW_PRINTLN) {println}
              [0027, 0010] (0045,               ON_PAR) {(}
              [0027, 0011] (0006,            CT_STRING) {"Digite os numeros que serao ordenados"}
              [0027, 0050] (0046,              OFF_PAR) {)}
              [0027, 0051] (0054,            SEMICOLON) {;}
  28  		for( int i : 0,1,n) {
              [0028, 0003] (0031,               RW_FOR) {for}
              [0028, 0006] (0045,               ON_PAR) {(}
              [0028, 0008] (0032,               RW_INT) {int}
              [0028, 0012] (0001,                   ID) {i}
              [0028, 0014] (0050,                COLON) {:}
              [0028, 0016] (0004,               CT_INT) {0}
              [0028, 0017] (0061,                  SEP) {,}
              [0028, 0018] (0004,               CT_INT) {1}
              [0028, 0019] (0061,                  SEP) {,}
              [0028, 0020] (0001,                   ID) {n}
              [0028, 0021] (0046,              OFF_PAR) {)}
              [0028, 0023] (0047,             ON_BRACE) {{}
  29  			read( array [ i ] );
              [0029, 0004] (0038,              RW_READ) {read}
              [0029, 0008] (0045,               ON_PAR) {(}
              [0029, 0010] (0001,                   ID) {array}
              [0029, 0016] (0008,           ON_BRACKET) {[}
              [0029, 0018] (0001,                   ID) {i}
              [0029, 0020] (0009,          OFF_BRACKET) {]}
              [0029, 0022] (0046,              OFF_PAR) {)}
              [0029, 0023] (0054,            SEMICOLON) {;}
  30  		}
              [0030, 0003] (0048,            OFF_BRACE) {}}
  31  		
  32  		println("lista dos valores digitados");
              [0032, 0003] (0040,           RW_PRINTLN) {println}
              [0032, 0010] (0045,               ON_PAR) {(}
              [0032, 0011] (0006,            CT_STRING) {"lista dos valores digitados"}
              [0032, 0040] (0046,              OFF_PAR) {)}
              [0032, 0041] (0054,            SEMICOLON) {;}
  33  		for (int i : 0, 1, n){
              [0033, 0003] (0031,               RW_FOR) {for}
              [0033, 0007] (0045,               ON_PAR) {(}
              [0033, 0008] (0032,               RW_INT) {int}
              [0033, 0012] (0001,                   ID) {i}
              [0033, 0014] (0050,                COLON) {:}
              [0033, 0016] (0004,               CT_INT) {0}
              [0033, 0017] (0061,                  SEP) {,}
              [0033, 0019] (0004,               CT_INT) {1}
              [0033, 0020] (0061,                  SEP) {,}
              [0033, 0022] (0001,                   ID) {n}
              [0033, 0023] (0046,              OFF_PAR) {)}
              [0033, 0024] (0047,             ON_BRACE) {{}
  34  			int a = array [ i ];
              [0034, 0004] (0032,               RW_INT) {int}
              [0034, 0008] (0001,                   ID) {a}
              [0034, 0010] (0010,               OP_ATR) {=}
              [0034, 0012] (0001,                   ID) {array}
              [0034, 0018] (0008,           ON_BRACKET) {[}
              [0034, 0020] (0001,                   ID) {i}
              [0034, 0022] (0009,          OFF_BRACKET) {]}
              [0034, 0023] (0054,            SEMICOLON) {;}
  35  			println (a);
              [0035, 0004] (0040,           RW_PRINTLN) {println}
              [0035, 0012] (0045,               ON_PAR) {(}
              [0035, 0013] (0001,                   ID) {a}
              [0035, 0014] (0046,              OFF_PAR) {)}
              [0035, 0015] (0054,            SEMICOLON) {;}
  36  		}
              [0036, 0003] (0048,            OFF_BRACE) {}}
  37  		
  38  		shellSort (array,n);
              [0038, 0003] (0001,                   ID) {shellSort}
              [0038, 0013] (0045,               ON_PAR) {(}
              [0038, 0014] (0001,                   ID) {array}
              [0038, 0019] (0061,                  SEP) {,}
              [0038, 0020] (0001,                   ID) {n}
              [0038, 0021] (0046,              OFF_PAR) {)}
              [0038, 0022] (0054,            SEMICOLON) {;}
  39  		
  40  		println("valores ordenados");
              [0040, 0003] (0040,           RW_PRINTLN) {println}
              [0040, 0010] (0045,               ON_PAR) {(}
              [0040, 0011] (0006,            CT_STRING) {"valores ordenados"}
              [0040, 0030] (0046,              OFF_PAR) {)}
              [0040, 0031] (0054,            SEMICOLON) {;}
  41  		for(int i : 0 , 1 , n) {
              [0041, 0003] (0031,               RW_FOR) {for}
              [0041, 0006] (0045,               ON_PAR) {(}
              [0041, 0007] (0032,               RW_INT) {int}
              [0041, 0011] (0001,                   ID) {i}
              [0041, 0013] (0050,                COLON) {:}
              [0041, 0015] (0004,               CT_INT) {0}
              [0041, 0017] (0061,                  SEP) {,}
              [0041, 0019] (0004,               CT_INT) {1}
              [0041, 0021] (0061,                  SEP) {,}
              [0041, 0023] (0001,                   ID) {n}
              [0041, 0024] (0046,              OFF_PAR) {)}
              [0041, 0026] (0047,             ON_BRACE) {{}
  42  			int b = array [ i ];
              [0042, 0004] (0032,               RW_INT) {int}
              [0042, 0008] (0001,                   ID) {b}
              [0042, 0010] (0010,               OP_ATR) {=}
              [0042, 0012] (0001,                   ID) {array}
              [0042, 0018] (0008,           ON_BRACKET) {[}
              [0042, 0020] (0001,                   ID) {i}
              [0042, 0022] (0009,          OFF_BRACKET) {]}
              [0042, 0023] (0054,            SEMICOLON) {;}
  43  			println(b);
              [0043, 0004] (0040,           RW_PRINTLN) {println}
              [0043, 0011] (0045,               ON_PAR) {(}
              [0043, 0012] (0001,                   ID) {b}
              [0043, 0013] (0046,              OFF_PAR) {)}
              [0043, 0014] (0054,            SEMICOLON) {;}
  44  		}
              [0044, 0003] (0048,            OFF_BRACE) {}}
  45  		return 0; 
              [0045, 0003] (0027,            RW_RETURN) {return}
              [0045, 0010] (0004,               CT_INT) {0}
              [0045, 0011] (0054,            SEMICOLON) {;}
  46  	}
              [0046, 0002] (0048,            OFF_BRACE) {}}
